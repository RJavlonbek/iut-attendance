{{!< default}}
<div class="container">
	<div class="jumbotron">
		<h1>IUT Attendance Application</h1>
		<p>This is the backend part of our application, which was developed for improving attendace methods in higher education systems</p>
		<p></p>
		<p>The application is based on latest technologies, including NodeJS, MongoDB, FaceAPI & TensorflowC++</p>
		<hr>
		<p>We have created a default Admin user for you with the email <strong>javlonarjei042@gmail.com</strong> and the password <strong>12345</strong>.</p>
		<p><a href="/keystone/signin" style="margin-right: 10px" class="btn btn-lg btn-primary">Sign in</a> to use the Admin UI.</p>
		<hr>
		<p>
			If you want to support or follow for updates, contact <a href="">@javlonbekrakhimberdiev</a> on telegram.
		</p>
	</div>
</div>

<div class="container">
	<div class="row">
	<div class="col-12">
	<h2>API documentation</h2>
	<table class="table table-bordered">
		<thead>
			<tr>
				<th>URL</th>
				<th>Method</th>
				<th>Data</th>
				<th>Response</th>
				<th>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td>/api/teacher/login</td>
				<td>POST</td>
				<td>{teacherId:'u123456', password:'*****'}</td>
				<td><pre>
{
	status, 
	message, 
	user:{
		_id, 
		teacherId, 
		firstname, 
		lastname
	}, 
	userType:'teacher || student'
}
				</pre></td>
				<td>login</td>
			</tr>
			<tr>
				<td>/api/teacher/:teacherId/timetable</td>
				<td>GET</td>
				<td></td>
				<td><pre>
[{
	number: "001",
	groups: [{
		_id,
		title: "CSE 17-01"
	}],
	course: {
		_id: ObjectId,
		title: "Int to Database"
	},
	lectures:[{
		day: 2, (tuesday)
		time: "12:30",
		room: "B209"
	}],
	teacher:{
		firstname,
		lastname
	}
}]
				</pre></td>
				<td>Timetable for teacher</td>
			</tr>
			<tr>
				<td>/api/teacher/:teacherId/courses</td>
				<td>GET</td>
				<td>-</td>
				<td><pre>
[{
	_id,
	title
}]
				</pre></td>
				<td>Get list of courses that are taught by the teacher</td>
			</tr>
			<tr>
				<td>/api/teacher/:teacherId/sections</td>
				<td>GET</td>
				<td>-</td>
				<td><pre>
[{
	_id,
	number: '001',
	course: {
		_id,
		title: 'Int to Database'
	}
}]
				</pre></td>
				<td>Get list of sections that are taught by the given teacher</td>
			</tr>
			<tr>
				<td>/api/teacher/:teacherId/attendance</td>
				<td>GET</td>
				<td></td>
				<td><pre>
{
	students: [{
		_id,
		studentId: 'u1710005',
		firstname,
		lastname
	}], 
	lectureId:ObjectId, 
	section:{
		_id,
		number:'001'
	}, 
	course:{
		_id,
		title: 'Operating System'
	},
	groups: [{
		_id,
		title: 'CIE-17-07'
	}],
	number: {Lecture num},
	room: "B209",
	day: 5  //Friday,
	time: "16:30",
	status, 
	message: 'new lecture'||'existing lecture'
}
				</pre></td>
				<td>
					STEP-1 of attendance; starts a new lecture which should be occured on current time; and returns a list of students those are supposed to attend this lecture; and id of new lecture;<br>
					If there is no currently oncoing lecture, it returns details of the lecture which was last finished till now<br>
				</td>
			</tr>

			<tr>
				<td>/api/teacher/:teacherId/attendance-report</td>
				<td>GET</td>
				<td><pre>
{
	lectureId: ObjectId,
	excel: Boolean
}
				</pre></td>
				<td>
					If lectureId is given: 
<pre>
{
	data:[
		['u1710005', 0||1 ],
		['u1710033', 0||1 ],
		...
	],
	course: "Int to Database",
	section: "001",
	lecture: {lecture num}
}
</pre>
				</td>
				<td>
					Attendance Report;
					Returns excel file, if 'excel' field is true;<br>
					'data' field stores arrays of studentId and attendance status
				</td>
			</tr>

			<tr>
				<td>/api/teacher/:teacherId/file-upload</td>
				<td>POST</td>
				<td><pre>
{
	file: File,
	title: String,
	courseId: ObjectId
}					
				</pre></td>
				<td><pre>
{
	status,
	message,
	filename: "{ObjectID}.{extension}"
}
				</pre></td>
				<td>STEP 1 of FILE UPLOADING; stores file informations and returns new filename</td>
			</tr>

			<tr>
				<td>https://iut-files.mis.uz/file-upload.php</td>
				<td>POST</td>
				<td><pre>
{
	file: File,
	filename: "{ObjectID}.{extension}",
	app: "iut-attendance"
}
				</pre></td>
				<td><pre>
{
	status,
	message,
	url: "Url of uploaded file"
}
				</pre></td>
				<td>STEP 2 of FILE UPLOADING; uploads file to php server, and returns url of uploaded file; Filename field is taken from STEP-1</td>
			</tr>
			<tr>
				<td>/api/teacher/:teacherId/files</td>
				<td>GET</td>
				<td>-</td>
				<td><pre>
[{
	_id,
	name: "Original name",
	url,
	course:{
		_id,
		title
	}
}]
				</pre></td>
				<td>Get the list of files uploaded by given teacher</td>
			</tr>
<!-- 			<tr>
				<td>/api/lecture/attendance</td>
				<td>POST</td>
				<td>{data: [{_label:'u1710005', _distance:0.43}], lectureId: ObjectId}</td>
				<td>{status, message}</td>
				<td>THIS API IS REQUESTED BY ONLY FACE_API SERVER, otherwise you don't need it (after 2-step)</td>
			</tr> -->
			<tr>
				<td>/api/lecture/students</td>
				<td>GET</td>
				<td>{lectureId:ObjectId}</td>
				<td><pre>
{
	students: [{
		_id, 
		studentId, 
		firstname, 
		lastname
	}], 
	status, 
	message
}
				</pre></td>
				<td>Gets the list of students who attended to given lecture (not used)</td>
			</tr>
			<tr>
				<td>/api/survey/start</td>
				<td>POST</td>
				<td>{title:String, content:String, author:ObjectId}</td>
				<td><pre>
{
	status, 
	message, 
	survey:{
		_id, 
		title, 
		content, 
		student||teacher:ObjectId, 
		createdAt
	}
}
				</pre></td>
				<td>Create new survey and returns survey data</td>
			</tr>
			<tr>
				<td>/api/survey/find</td>
				<td>GET</td>
				<td>-</td>
				<td><pre>
[{
	_id, 
	title, 
	content, 
	createdAt, 
	student||teacher:{
		_id, 
		firstname, 
		lastname, 
		studentId||teacherId
	},
	votedUp:[{
		_id,
		studentId,
		firstname,
		lastname
	}],
	votedDown:[{
		_id,
		studentId,
		firstname,
		lastname
	}]
}]
				</pre></td>
				<td>Returns the list of surveys with their author informations</td>
			</tr>
			<tr>
				<td>/api/survey/vote</td>
				<td>POST</td>
				<td><pre>
{
	surveyId: ObjectId, 
	studentId: ObjectId, 
	vote:'up||down'
}
				</pre></td>
				<td><pre>
{
	status,
	message
}
				</pre></td>
				<td>API for vote up/down for a survey</td>
			</tr>

			<tr>
				<td>/api/student/find</td>
				<td>GET</td>
				<td><pre>
{
	groupId: ObjectId (optional)
}
				</pre></td>
				<td><pre>
[{
	_id,
	studentId,
	firstname,
	lastname,
	group:{
		_id,
		title:'CSE 17-01'
	}
}]
				</pre></td>
				<td>Get list of students according to given filters</td>
			</tr>

			<tr>
				<td>/api/student/:studentId/current-attendance</td>
				<td>GET</td>
				<td><pre>
{}
				</pre></td>
				<td><pre>
{
	status,
	message,
	attended: Boolean,
	course: 'Intr to Database',
	section: '001'
}
				</pre></td>
				<td>Get attendance status of the student for current lecture (ongoing lecture)</td>
			</tr>

			<tr>
				<td>/api/student/:studentId/attendance-report</td>
				<td>GET</td>
				<td><pre>
{
	excel: Boolean (not ready yet)
}
				</pre></td>
				<td><pre>
[{
	_id (Section ID),
	course:{
		_id,
		title
	},
	number: "001",
	lectures:[{
		number: {lecture num},
		date: "dd.mm",
		attended: 0||1
	}]
}]
				</pre></td>
				<td>Data about total attendance status of the student, for each course, each lecture</td>
			</tr>

			<tr>
				<td>/api/group/find</td>
				<td>GET</td>
				<td><pre>
{
	teacherId: ObjectId (optional)
}
				</pre></td>
				<td><pre>
[{
	_id,
	title: 'CSE 17-01'
}]
				</pre></td>
				<td>Get list of groups</td>
			</tr>
		</tbody>
	</table>
	</div>
	<div class="col-12">
		<h4>API of https://iut-faceapi.herokuapp.com</h4>
		<table class="table table-bordered">
			<thead>
				<tr>
					<th>URL</th>
					<th>Method</th>
					<th>Data</th>
					<th>Response</th>
					<th>Description</th>
				</tr>
			</thead>
			<tbody>
				<tr>
					<td>/detect-faces</td>
					<td>POST</td>
					<td><pre>
{
	photo:File(image)
}
					</pre></td>
					<td>Image/jpeg</td>
					<td>Detects all faces on image and draws a box on each face. Estimates face expression, gender, age and writes this informations next to each face box. Returns new drawn picture</td>
				</tr>
				<tr>
					<td>/attendance</td>
					<td>POST</td>
					<td><pre>
{
	photo: File(image),
	lectureId: ObjectId,
	onlyImg: Boolean
}
					</pre></td>
					<td><pre>
{
	width: Int,
	height: Int,
	students:[{
		_id,
		studentId,
		firstname,
		lastname,
		attended: Boolean
	}],
	status,
	message
}
					</pre></td>
					<td>
						2-STEP of attendance (lasts step). Detects all faces from given picture, recognizes all faces according to student faces. Marks them attended for given lecture. Draws boxes on each face and writes studentId's on them, and returns ready picture as buffer<br>
						- Returns image file, if 'onlyImg' field is truthy
					</td>
				</tr>
			</tbody>
		</table>
	</div>
	</div>
</div>
